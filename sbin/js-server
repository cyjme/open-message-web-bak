#!/usr/bin/env node

var __dirname = __dirname || '';
const path = require('path');
//const scriptDir = path.dirname(process.argv[1]);
//const baseDir = path.resolve(scriptDir, './../');
const baseDir = path.resolve(__dirname, './../../../../../');
const glob = require('glob');
const pathinfo = require('pathinfo');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const meow = require('meow');

var contextDir = path.join(baseDir, './code/dev/front/js');

var siteConfig = require(path.join(baseDir, './code/dev/front/setting/config/site.local.js'));
var appConfig = require(path.join(baseDir, './code/dev/front/setting/config/app.local.js'));

var options = {
    output: {
        filename: '[name].js',
        chunkFilename: '[hash]-[id].js',
        path: path.join(baseDir, './code/site/static/js'),
        publicPath: '//' + siteConfig.static.host + '/js/'
    },
    entry: {},
    module: {}
};

function buildResolve(options)
{
    var modules = [
        path.resolve(baseDir, 'node_modules'),
        contextDir
    ];

    var jsDir;
    var appName;

    for (appName in appConfig) {
        jsDir = path.resolve(baseDir, './code' + appConfig[appName].dir + '/front/js');
        modules.push(jsDir);
    }
    var gapJsDir = path.resolve(baseDir, './code/dev/core/gap/front/js');
    modules.push(gapJsDir);

    options.resolve = {
        modules: modules
    };
}

function run(options) {
    var dir = contextDir;
    var globPath = path.resolve(dir, '*.js');
    var files = glob.sync(globPath, {follow: true});
    var i;
    var len;
    var info;

    options.context = dir;

    len = files.length;

    if (!len) {
        console.log(`no js files in dir ${dir}`);
        return;
    }

    options.entry = {};

    for (i = 0; i < len; i++) {
        info = pathinfo(files[i]);
        options.entry[info.basename] = './' + info.filename;
    }


    var compiler = webpack(options);
    var server = new WebpackDevServer(compiler, {
        stats: {colors: true},
        hot: true,
        contentBase: dir,
        publicPath: '/js/',
        clientLogLevel: 'none',
        headers: { 'X-Custom-Header': 'yes' },
        disableHostCheck: true,
    });

    console.log('server start listening');
    server.listen(serverPort, '0.0.0.0');
}


buildResolve(options);

var cli = meow({
    version: '0.1',
    help: `
        Usage:,
         ./bin/build-js.js [options],

        Options:
            --port=8787
            --source-map
            --minimize
    `
}, {
    alias: {
        o: 'output'
    },
    default: {
        'minimize': 'false',
        'source-map': 'true',
        'uglify': 'false',
        'port': '8787'
    }
});

var sourceMap = cli.flags.sourceMap === 'false' ? false : true;
var minimize = cli.flags.minimize === 'true' ? true : false;

var serverPort = parseInt(cli.flags.port);

options.plugins = [];

if (sourceMap) {
    options.devtool = 'source-map';
}

if (minimize) {
    options.plugins.push(
        new webpack.DefinePlugin({
            'process.env': {
                'NODE_ENV': JSON.stringify('production')
            }
        }),
        new webpack.LoaderOptionsPlugin({
            minimize: true,
            debug: false
        }),
        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false,
            },
            output: {
                comments: false,
            },
        }),
        new webpack.optimize.AggressiveMergingPlugin()
    );
}

run(options);
